apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "recommendation.labels" . | nindent 4 }}
  name: {{ include "recommendation.name" . }}

spec:
  replicas: {{ .Values.predictionService.replicas }}
  selector:
    matchLabels:
      {{- include "recommendation.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "recommendation.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccount: {{include "recommendation.serviceAccountName" . }}
      containers:
      - name: recommendation-service
        image: {{ tpl .Values.recommendationService.image . }}
        env:
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: {{ include "postgres.configMapName" . }}
              key: POSTGRES_DB
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "postgres.secretName"  .}}
              key: POSTGRES_PASSWORD
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "postgres.secretName" . }}
              key: POSTGRES_USER
        - name: DB_HOST
          value: {{ include "postgres.serviceName" . }}
        - name: DB_PORT
          value: {{ include "postgres.servicePort" . | toString | quote }}
        {{- if and .Values.recommendationService.fastApi  }}
        {{- range .Values.recommendationService.fastApi.env }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        {{- end }}
        - name: COUPON_SCORER_URL
          value: {{ printf "http://%s:%s/score" (include "prediction.serviceName" .) (include "prediction.servicePort" .) | quote }}
        {{- if .Values.globalInfra.mqtt.brokerServer }}
        - name: MQTT_HOST
          value: {{  .Values.globalInfra.mqtt.brokerServer | quote }}
        {{- end }}
        {{- if .Values.globalInfra.mqtt.brokerPort }}
        - name: MQTT_PORT
          value: {{  .Values.globalInfra.mqtt.brokerPort  | quote }}
        {{- end }}
        {{- if .Values.globalInfra.mqtt.enterTopic }}
        - name: ENTER_TOPIC
          value: {{  .Values.globalInfra.mqtt.enterTopic | quote }}
        {{- end }}
        {{- if .Values.globalInfra.mqtt.focusTopic }}
        - name: FOCUS_TOPIC
          value: {{  .Values.globalInfra.mqtt.focusTopic | quote }}
        {{- end }}
        {{- if .Values.globalInfra.mqtt.couponsTopic }}
        - name: COUPON_PREDICTION_TOPIC
          value: {{  .Values.globalInfra.mqtt.couponsTopic | quote }}
        {{- end }}
        {{- if .Values.globalInfra.mqtt.sslEnabled }}
        - name: MQTT_BROKER_CERT_FILE
          value: /certs/broker_ca.crt
        {{- end }}
        {{- if .Values.globalInfra.mqtt.authenticationEnabled }}
        envFrom:
        - secretRef:
            name: mqtt-auth-creds
        {{- end }}
        {{- if .Values.globalInfra.mqtt.sslEnabled }}
        volumeMounts:
        - name: broker-cert
          readOnly: true
          mountPath: /certs
        {{- end }}
        ports:
        - containerPort: 80
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 80