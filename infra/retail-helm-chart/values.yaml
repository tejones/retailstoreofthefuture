# Default values for retail-store.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# deployment on openshift container platform
openshift: true

globalInfra:

  namespace: rsotf
  imageRegistry: image-registry.openshift-image-registry.svc
  registryPort: "5000"

  kafka:
    bootstrapServers:
      - retail-store-kafka-bootstrap.retail-infra.svc.cluster.local:9092
    
    # Kafka topic name for entry events
    entryEventTopic: "entryTopic"

    # Kafka topic name for focus events
    focusEventTopic: "focusTopic"

    # Kafka topic name for prediction results
    couponPredictionTopic: "predictionTopic"
  
  mqtt:
    # set to true if your MQTT broker uses SSL, default: false
    sslEnabled: false

    # path to the file containing broker CA certificate in PEM format 
    # NOTE: files must be in the Chart directory. e.g. in files/ directory
    # sslBrokerCaCertPath: "files/broker.pem"

    # set to true if MQTT requires username, password authentication, default: false
    authenticationEnabled: false
    
    # MQTT client username
    user: admin
    # MQTT client password
    password: password

    # name or IP address of the MQTT broker 
    brokerServer: ex-aao-mqtt-0-svc
    
    # port that MQTT broker is listening on, default: 1883
    brokerPort: 1883

    # MQTT topic for entering events
    enterTopic: "retail/mqttEntryTopic"
    
    # MQTT topic for movement events
    moveTopic: "retail/mqttMovementTopic"
    
    # MQTT topic for exit events
    exitTopic: "retail/mqttExitTopic"

    # MQTT topic for focus events
    focusTopic: "retail/mqttFocusTopic"

    # MQTT topic for customer browsing events
    browseTopic: "retail/mqttBrowseTopic"

    # MQTT topic for prediction results
    couponsTopic: "retail/mqttCouponsTopic"


postgres:
  # postgres image used for cache 
  image: docker.io/bitnami/postgresql:15.2.0-debian-11-r0

  # postgresql database user  
  postgresUser: cacheUser

  # postgresql user's password
  postgresPassword: cachePass
  
  # postgresql database name
  postgresDB: cacheDb

  # postgresql service type, default: ClusterIP
  # serviceType: ClusterIP

  # postgresql service port, default: 5432 
  # servicePort: 5432 

  serviceAccount:
    # create separate service account for postgres
    create: true
    # additional service account annotations
    annotations: { }

  # specify limits and requests for the postgresql
  resources: { }

recommendationService:
  # recommendation service docker image
  image: "{{ .Values.globalInfra.imageRegistry }}:{{ .Values.globalInfra.registryPort }}/{{ .Values.globalInfra.namespace }}/recommendation-service:latest"
  
  # number of recommendation service replicas
  replicas: 1

  # recommendation service type, default: ClusterIP
  # serviceType: ClusterIP

  # recommendation service port. default: 80
  # servicePort: 8080
  
  # fastAPI environment variables, see https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker for reference
  fastApi:
    env:
      - name: LOG_LEVEL
        value: info
      - name: MAX_WORKERS
        value: 1

  serviceAccount:
    # create separate service account for recommendation service
    create: true
    # additional service account annotations
    annotations: { }
  
  # specify limits and requests for the recommendation service
  resources: { }

predictionService:
  # prediction service docker image
  image: "{{ .Values.globalInfra.imageRegistry }}:{{ .Values.globalInfra.registryPort }}/{{ .Values.globalInfra.namespace }}/prediction-service:latest"
  
  # number of prediction service replicas
  replicas: 1

  # prediction service type, default: ClusterIP
  # serviceType: NodePort

  # prediction service port, default: 80
  # servicePort: 8080 

  # fastAPI environment variables, see https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker for reference
  fastApi:
    env:
      - name: LOG_LEVEL
        value: info
      - name: MAX_WORKERS
        value: 1

  serviceAccount:
    # create separate service account for prediction service
    create: true
    # additional service account annotations
    annotations: { }

  # specify limits and requests for the prediction service
  resources: { }

customerSimulationService:
  # customer simulation service docker image
  image: "{{ .Values.globalInfra.imageRegistry }}:{{ .Values.globalInfra.registryPort }}/{{ .Values.globalInfra.namespace }}/customer-simulation-service:latest"
  
  # number of customer simulations service replicas
  replicas: 1

  fastApi:
    env:
      - name: LOG_LEVEL
        value: info
      - name: MAX_WORKERS
        value: 1
  # customer simulation service type, default: ClusterIP
  # serviceType: ClusterIP

  # customer simulation service port. default: 80
  # servicePort: 8080

  serviceAccount:
    # create separate service account for customer simulation service
    create: true
    # additional service account annotations
    annotations: { }


  # set a log level for customer simulation service
  logLevel: info
  
  # override the default customer lit file location: /app/app/resources/customers.json
  # customersListFile: ""

# TODO other components use "service" postfix
visualization:
  # visualization simulation service docker image
  image: "{{ .Values.globalInfra.imageRegistry }}:{{ .Values.globalInfra.registryPort }}/{{ .Values.globalInfra.namespace }}/visualization-service:latest"
  
  # visualization service type, default: ClusterIP
  # serviceType: ClusterIP

  # visualization service port. default: 80
  # servicePort: 8080

  fastApi:
    env:
      - name: LOG_LEVEL
        value: info
      - name: MAX_WORKERS
        value: 1

  serviceAccount:
    create: true
    annotations: { }

cachedbLoader:
  image: "{{ .Values.globalInfra.imageRegistry }}:{{ .Values.globalInfra.registryPort }}/{{ .Values.globalInfra.namespace }}/cachedb-loader"
  serviceAccount:
    create: true
    annotations: { }

decisionService:
  # decision service docker image
  image: "{{ .Values.globalInfra.imageRegistry }}:{{ .Values.globalInfra.registryPort }}/{{ .Values.globalInfra.namespace }}/decision-service:latest"

  # number of decision service replicas
  replicas: 1

  # decision service type, default: ClusterIP
  # serviceType: NodePort

  # decision service port, default: 80
  # servicePort: 8080

  arguments:
    - name: mp_messaging_incoming_jeden_topic
      value: "{{ .Values.globalInfra.mqtt.moveTopic }}"
    - name: mp_messaging_incoming_jeden_host
      value: "{{ .Values.globalInfra.mqtt.brokerServer }}"
    - name: mp_messaging_incoming_jeden_port
      value: "{{ .Values.globalInfra.mqtt.brokerPort | quote }}"
    - name: kafka_bootstrap_servers
      value: "{{ first .Values.globalInfra.kafka.bootstrapServers }}"

  serviceAccount:
    # create separate service account for decision service
    create: true
    # additional service account annotations
    annotations: { }

fepumpService:
  # decide if the service should be deployed
  deploy: true

  image: "{{ .Values.globalInfra.imageRegistry }}:{{ .Values.globalInfra.registryPort }}/{{ .Values.globalInfra.namespace }}/focus-events-pump:latest"

  replicas: 1

  fastApi:
    env:
      - name: LOG_LEVEL
        value: info

  config:
    env:
      - name: GENERATOR_AUTO_START
        value: false
      - name: PERIODIC_TASKS_INTERVAL
        value: 1.0

  serviceAccount:
    create: true
    annotations: { }

  resources: { }
